<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="<%= page.keywords || config.keywords || 'Hexo Theme Redefine' %>">
    <% if (!theme.global.open_graph) { %>
        <meta name="description" content="<%= page.description || config.description || 'Hexo Theme Redefine' %>">
    <% }%>
    <meta name="author" content="<%= theme.info.author || config.author || 'Redefine Team' %>">
    <!-- preconnect -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <% if (theme.cdn.enable == true) { %>
        <% if (theme.cdn.provider == 'jsdelivr') { %>
            <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin>
        <% } else if (theme.cdn.provider == 'unpkg') { %>
            <link rel="preconnect" href="https://unpkg.com" crossorigin>
        <% } else if (theme.cdn.provider == 'personal') { %>
            <link rel="preconnect" href="https://evan.beee.top" crossorigin>
        <% } else { %>
            <link rel="preconnect" href="https://npm.elemecdn.com" crossorigin>
        <% } %>
    <% } %>
    <!--- Seo Part-->
    <%- generate_seo(theme, page) %>
    <%- autoCanonical(config, page) %>
    <meta name="robots" content="index,follow">
    <meta name="googlebot" content="index,follow">
    <meta name="revisit-after" content="1 days">
    <% if (theme.global.open_graph) { %>
        <%- open_graph() %>
    <% }%>
    <% if (theme.global.google_analytics.enable) { %>
        <!-- Google tag (gtag.js) -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=<%= theme.global.google_analytics.id %>"></script>
        <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', '<%= theme.global.google_analytics.id %>');
        </script>
    <% } %>
    <!--- Icon Part-->
    <link rel="icon" type="image/png" href="<%= url_for(theme.defaults.favicon) %>" sizes="192x192">
    <link rel="apple-touch-icon" sizes="180x180" href="<%= url_for(theme.defaults.favicon) %>">
    <meta name="theme-color" content="<%= theme.colors.primary %>">
    <%- favicon_tag(url_for(theme.defaults.favicon)) %>
    <!--- Page Info-->
    <%
    let title = page.title;
    if (is_archive()) {
        title = __('archive');
        if (is_month()) {
            title += ': ' + page.year + '/' + page.month;
        } else if (is_year()) {
            title += ': ' + page.year;
        }
    } else if (is_category()) {
        title = __('category') + ': ' + page.category;
    } else if (is_tag()) {
        title = __('tag') + ': ' + page.tag;
    } else {
        title = __(page.title);
    }
    %>
    <title>
        <% if (title) { %>
            <%= title %> -
        <% } %>
        <%= theme.info.title || config.title || 'Redefine Theme' %>
    </title>
    <%- css('css/style') %>
    <%- renderCSS('assets/fonts.css') %>
    <!--- Font Part-->
    <% if (theme.home_banner.custom_font.enable) { %>
        <link href="<%- theme.home_banner.custom_font.url %>" rel="stylesheet">
    <% } %>
    <% if (theme.articles.code_block.font.enable) { %>
        <link href="<%- theme.articles.code_block.font.url %>" rel="stylesheet">
    <% } %>
    <% if (theme.global.fonts.chinese.enable) { %>
        <link href="<%- theme.global.fonts.chinese.url %>" rel="stylesheet">
    <% } %>
    <% if (theme.global.fonts.english.enable) { %>
        <link href="<%- theme.global.fonts.english.url %>" rel="stylesheet">
    <% } %>

    <!--- Inject Part-->
    <% if (theme.inject.enable == true) { %>
        <% for (let i in theme.inject.head) { %>
            <% if (theme.inject.head[i] !== null){ %>
                <% if (theme.global.pjax == true) { %>
                    <%- theme.inject.head[i].replace("<script", "<script data-pjax") %>
                <% } else { %>
                    <%- theme.inject.head[i] %>
            <% } }%>
    <% } }%>
    <%- export_config() %>
    
    <!--- Fontawesome Part-->
    <%- renderCSS('fontawesome/fontawesome.min.css') %>
    <%- renderCSS('fontawesome/brands.min.css') %>
    <%- renderCSS('fontawesome/solid.min.css') %>
    <%- renderCSS('fontawesome/regular.min.css') %>
    <% if (theme.fontawesome.thin == true) { %>
        <%- renderCSS('fontawesome/thin.min.css') %>
    <% } %>
    <% if (theme.fontawesome.light == true) { %>
        <%- renderCSS('fontawesome/light.min.css') %>
    <% } %>
    <% if (theme.fontawesome.duotone == true) { %>
        <%- renderCSS('fontawesome/duotone.min.css') %>
    <% } %>
    <% if (theme.fontawesome.sharp_solid == true) { %>
        <%- renderCSS('fontawesome/sharp-solid.min.css') %>
    <% } %>
    
    <!-- Aplayer debug only -->
    <link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css">
    <script src="https://fastly.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"></script> 
    <script src="https://fastly.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js"></script>
    <!-- live 2D -->
    <script src="https://fastly.jsdelivr.net/gh/Hexrotor/live2d-widget@latest/autoload.js"></script>
    <!-- firework mouse -->
    <script>
        function clickEffect() {
  let balls = [];
  let longPressed = false;
  let longPress;
  let multiplier = 0;
  let width, height;
  let origin;
  let normal;
  let ctx;
  const colours = ["#F73859", "#14FFEC", "#00E0FF", "#FF99FE", "#FAF15D"];
  const canvas = document.createElement("canvas");
  document.body.appendChild(canvas);
  canvas.setAttribute("style", "width: 100%; height: 100%; top: 0; left: 0; z-index: 99999; position: fixed; pointer-events: none;");
  const pointer = document.createElement("span");
  pointer.classList.add("pointer");
  document.body.appendChild(pointer);
 
  if (canvas.getContext && window.addEventListener) {
    ctx = canvas.getContext("2d");
    updateSize();
    window.addEventListener('resize', updateSize, false);
    loop();
    window.addEventListener("mousedown", function(e) {
      pushBalls(randBetween(10, 20), e.clientX, e.clientY);
      document.body.classList.add("is-pressed");
      longPress = setTimeout(function(){
        document.body.classList.add("is-longpress");
        longPressed = true;
      }, 500);
    }, false);
    window.addEventListener("mouseup", function(e) {
      clearInterval(longPress);
      if (longPressed == true) {
        document.body.classList.remove("is-longpress");
        pushBalls(randBetween(50 + Math.ceil(multiplier), 100 + Math.ceil(multiplier)), e.clientX, e.clientY);
        longPressed = false;
      }
      document.body.classList.remove("is-pressed");
    }, false);
    window.addEventListener("mousemove", function(e) {
      let x = e.clientX;
      let y = e.clientY;
      pointer.style.top = y + "px";
      pointer.style.left = x + "px";
    }, false);
  } else {
    console.log("canvas or addEventListener is unsupported!");
  }
 
 
  function updateSize() {
    canvas.width = window.innerWidth * 2;
    canvas.height = window.innerHeight * 2;
    canvas.style.width = window.innerWidth + 'px';
    canvas.style.height = window.innerHeight + 'px';
    ctx.scale(2, 2);
    width = (canvas.width = window.innerWidth);
    height = (canvas.height = window.innerHeight);
    origin = {
      x: width / 2,
      y: height / 2
    };
    normal = {
      x: width / 2,
      y: height / 2
    };
  }
  class Ball {
    constructor(x = origin.x, y = origin.y) {
      this.x = x;
      this.y = y;
      this.angle = Math.PI * 2 * Math.random();
      if (longPressed == true) {
        this.multiplier = randBetween(14 + multiplier, 15 + multiplier);
      } else {
        this.multiplier = randBetween(6, 12);
      }
      this.vx = (this.multiplier + Math.random() * 0.5) * Math.cos(this.angle);
      this.vy = (this.multiplier + Math.random() * 0.5) * Math.sin(this.angle);
      this.r = randBetween(8, 12) + 3 * Math.random();
      this.color = colours[Math.floor(Math.random() * colours.length)];
    }
    update() {
      this.x += this.vx - normal.x;
      this.y += this.vy - normal.y;
      normal.x = -2 / window.innerWidth * Math.sin(this.angle);
      normal.y = -2 / window.innerHeight * Math.cos(this.angle);
      this.r -= 0.3;
      this.vx *= 0.9;
      this.vy *= 0.9;
    }
  }
 
  function pushBalls(count = 1, x = origin.x, y = origin.y) {
    for (let i = 0; i < count; i++) {
      balls.push(new Ball(x, y));
    }
  }
 
  function randBetween(min, max) {
    return Math.floor(Math.random() * max) + min;
  }
 
  function loop() {
    ctx.fillStyle = "rgba(255, 255, 255, 0)";
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for (let i = 0; i < balls.length; i++) {
      let b = balls[i];
      if (b.r < 0) continue;
      ctx.fillStyle = b.color;
      ctx.beginPath();
      ctx.arc(b.x, b.y, b.r, 0, Math.PI * 2, false);
      ctx.fill();
      b.update();
    }
    if (longPressed == true) {
      multiplier += 0.2;
    } else if (!longPressed && multiplier >= 0) {
      multiplier -= 0.4;
    }
    removeBall();
    requestAnimationFrame(loop);
  }
 
  function removeBall() {
    for (let i = 0; i < balls.length; i++) {
      let b = balls[i];
      if (b.x + b.r < 0 || b.x - b.r > width || b.y + b.r < 0 || b.y - b.r > height || b.r < 0) {
        balls.splice(i, 1);
      }
    }
  }
}
clickEffect();
</script>
</head>

